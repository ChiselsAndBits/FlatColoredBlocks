//for Ant filter
import org.apache.tools.ant.filters.ReplaceTokens;
plugins {
    id 'net.minecraftforge.gradle'
    id 'org.spongepowered.mixin'
    id 'org.parchmentmc.librarian.forgegradle'
    id 'com.matthewprenger.cursegradle'
}

repositories.mavenLocal()

configurations.create("includedLibraries")
configurations.implementation.extendsFrom configurations.includedLibraries
configurations.includedLibraries.transitive false

project.addCoreProject()

project.minecraft.mappings channel: "parchment", version: "${project.parchmentMinecraftVersion}-${project.parchmentVersion}-${project.minecraftVersion}"
project.minecraft.accessTransformer = project(':common').file("accesstransformer.cfg")

project.minecraft.runs {
    client { clientRun ->
        clientRun.workingDirectory project.file('run')
        clientRun.ideaModule "${rootProject.name.toLowerCase()}.${project.name.toLowerCase()}.main"
        clientRun.taskName 'Client'
        clientRun.arg "--mixin=${rootProject.name.toLowerCase()}.mixins.json"
        clientRun.jvmArgs "-Dmixin.debug=true", "-Dmixin.debug.export=true"
        clientRun.property 'mixin.env.remapRefMap', 'true'
        clientRun.property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        clientRun.mods { modsContainer ->
            modsContainer.create(rootProject.name.toLowerCase(), {
                source sourceSets.main
                source project(":common").sourceSets.main
                source project(":core").sourceSets.main
            })
        }
    }

    server { serverRun ->
        serverRun.workingDirectory project.file('run')
        serverRun.ideaModule "${rootProject.name.toLowerCase()}.${project.name.toLowerCase()}.main"
        serverRun.taskName 'Server'
        serverRun.arg "--mixin=${rootProject.name.toLowerCase()}.mixins.json"
        serverRun.jvmArgs "-Dmixin.debug=true", "-Dmixin.debug.export=true"
        serverRun.property 'mixin.env.remapRefMap', 'true'
        serverRun.property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        serverRun.mods { modsContainer ->
            modsContainer.create(rootProject.name.toLowerCase(), {
                source sourceSets.main
                source project(":common").sourceSets.main
                source project(":core").sourceSets.main
            })
        }
    }

    data { dataRun ->
        dataRun.workingDirectory project.file('run')
        dataRun.ideaModule "${rootProject.name.toLowerCase()}.${project.name.toLowerCase()}.main"
        dataRun.taskName "Data"
        dataRun.arg "--mixin=${rootProject.name.toLowerCase()}.mixins.json"
        dataRun.property 'mixin.env.remapRefMap', 'true'
        dataRun.property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
        dataRun.args '--mod', "${rootProject.name.toLowerCase()}",
                '--output', project(":core").file("src/datagen/generated"),
                '--existing', file('src/main/resources/'),
                '--existing', project(":core").file('src/main/resources/'),
                '--existing-mod', 'scena'
        dataRun.mods { modsContainer ->
            modsContainer.create(rootProject.name.toLowerCase(), {
                source sourceSets.main
                source project(":common").sourceSets.main
                source project(":core").sourceSets.main
            })
        }
    }
}

project.dependencies.minecraft "net.minecraftforge:forge:${project.minecraftVersion}-${project.forgeVersion}"
project.dependencies.annotationProcessor "org.spongepowered:mixin:${project.mixinAnnotationProcessorVersion}:processor"
project.dependencies.includedLibraries fg.deobf("com.communi-suggestu.scena:scena-forge:${project.scenaVersion}") {
    jarJar.pin(it, project.scenaVersion)
    jarJar.ranged(it, buildSupportedVersionRange(project.scenaVersion))
}
project.dependencies.compileOnly fg.deobf("com.communi-suggestu.saecularia-caudices:saecularia-caudices-core:${project.saeculariaCaudicesVersion}")
project.dependencies.runtimeOnly fg.deobf("mod.chiselsandbits:chisels-and-bits-forge:${project.chiselsAndBitsVersion}")

project.tasks.processResources.from (project(":common").file("accesstransformer.cfg")) {
    into 'META-INF'
}
setupResourceProcessing(project.tasks.processResources)

project.mixin.config "${rootProject.name.toLowerCase()}.mixins.json"
project.mixin.add project.sourceSets.main, "${rootProject.name.toLowerCase()}.refmap.json"

////////////////
// IntelliJ Project Import
// The Mixin annotation process does not have an obfuscation source when running through the IntelliJ compiler,
// thus we have to prevent it from being activated as part of importing this Gradle project into IntelliJ.
if (System.getProperty("idea.sync.active") == "true") {
    afterEvaluate {
        tasks.withType(JavaCompile).all {
            it.options.annotationProcessorPath = files()
        }
    }
}

jarJar {
    fromRuntimeConfiguration()
    dependencies {
        include(dependency("com.communi-suggestu.scena:scena-forge"))
    }
}

reobf {
    jarJar {}
}

afterEvaluate {
    tasks.jar.finalizedBy tasks.reobfJar
    tasks.jarJar.finalizedBy tasks.reobfJarJar
    tasks.reobfJarJar.enabled = true
}

tasks.jarJar.archiveClassifier.set("");
tasks.jar.archiveClassifier.set("slim");
tasks.build.dependsOn tasks.jarJar

project.publishToCurseForge(tasks.jarJar)